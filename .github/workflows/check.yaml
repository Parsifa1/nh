name: "Check formating & lints"

on:
  workflow_dispatch:
  pull_request:
    branches: ["master"]
    paths:
      - "Cargo.toml"
      - "Cargo.lock"
      - "xtask/Cargo.toml"
      - "src/**"
      - "xtask/src/**"
      - ".cargo/**"
      - ".github/workflows/check.yaml"
  push:
    branches-ignore:
      - "update-*"
    paths:
      - "Cargo.toml"
      - "Cargo.lock"
      - "xtask/Cargo.toml"
      - "src/**"
      - "xtask/src/**"
      - ".cargo/**"
      - ".github/workflows/check.yaml"

jobs:
  treewide-checks:
    runs-on: ubuntu-latest

    steps:
      - uses: cachix/install-nix-action@master
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare Dev Environment
        run: eval "$(nix print-dev-env)"

      # Check if the source code is formatted as per the tooling configurations
      # in the repository root. Unlike the Clippy lints below, formatting lints
      # **must** pass.
      - name: Check Formatting
        run: |
          # Verify that Rust source code is formatted
          cargo fmt --check

          # Verify that TOML files are formatted
          taplo fmt --check

      # We run clippy with lints that help avoid overall low-quality code or what is called "code smell."
      # Stylistic lints (e.g., clippy::style and clippy::complexity) are avoided but it is a good idea to
      # follow those while working on the codebase.
      - name: Clippy Lints
        run: |
          # Lint Changes
          cargo clippy -- \
            -W clippy::pedantic \
            -W clippy::correctness \
            -W clippy::suspicious
